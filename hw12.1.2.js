// Домашнее задание №12
// Задача №1
// Создайте массив строк cards. Этот массив должен содержать в себе 4 элемента. Каждый элемент должен состоять из 16 цифр.
// Пример массива: 
// [
//   '4567456745674567',
//   '4282428242824282',
//   '7224722472247224',
//   '8147814781478147'
// ]
// Перепишите функцию из задачи №3, домашнего задания №8 с использованием Promise.
// В новой функции вам нужно завернуть setTimeout в Promise и вернуть получившийся Promise из функции (сообщение ‘Ваша ставка принята’ из функции возвращать не нужно). В setTimeout вывод сообщений ‘Вы выиграли. Ваш выигрыш составляет….’ и ‘Вы проиграли. Ваши деньги сгорели.’ заменить resolve и reject.
// В reject передавать строку 'Вы проиграли. Ваши деньги сгорели.'
// В reject передавать объект со следующими полями:
// message: `Вы выиграли. Ваш выигрыш составляет {сумма выигрыша}`,
// value: сумма выигрыша (число)
// Напишите функцию для вывода выигрыша на карту. Функция должна принимать в качестве единственного аргумента сумму выигрыша. При старте функции, попросите пользователя ввести номер карты, на которую он хочет вывести свой выигрыш. Для запроса номера карты используйте prompt. После получения номера карты создайте Promise и верните его из функции. В созданном Promise с помощью setTimeout сымитируйте задержку при запросе на сервер (время задержки 3 секунды). В setTimeout реализуйте проверку наличия введённой карты в массиве cards. Для вывода результата используйте resolve, reject и передавайте в них следующие значения.
// В reject - 'Пользователя с таким номером карты не существует'
// В resolve - 'Ваш выигрыш в размере {сумма выигрыша из аргумента}, был выведен на карту с номером {введённый номер карты}. Поздравляем!'
// Вызовите функцию для создания ставки. Т.к. теперь функция возвращает Promise, вам нужно использовать метод then() для получения результата работы функции.
// Используйте .then() после вызова функции для создания ставки, передайте в него 2 функции. Первая функция для обработки resolve, вторая функция для обработки reject.
// Обработчик resolve должен выводить в консоль сообщение из поля message, полученного объекта, и возвращать вызов функции для вывода денег с полем value, полученного объекта, в качестве аргумента. (возвращать вызов функции нужно для организации работы асинхронного кода)
// Обработчик reject выводит полученный результат в консоль.
// Т.к. функция для вывода денег возвращает Promise, то для получения результата её работы нам нужно использовать метод then() ещё раз (создать цепочку из then()).
// После вызова первого then(), вызовите метод then() второй раз и передайте в него 2 функции для обработки resolve и reject. Каждая функция должна выводить в консоль полученный результат.


const cards = [
  '4567456745674567',
  '4282428242824282',
  '7224722472247224',
  '8147814781478147'
]

function casino() {
	const sportsBet = Number(prompt('Cделайте вашу ставку'))
	if (isNaN(sportsBet) || Math.sign(sportsBet) < 0) {
		return console.log('Нужно указать положительное число!')
	} 
	
	const min = -5
	const max = 5
	let randomNumb = Math.floor(min + Math.random() * (max + 1 - min))
	let winNumb = randomNumb * sportsBet

	let winMessage = {
		message: `Вы выиграли! Ваш выигрыш составляет ${winNumb}`,
		value: winNumb
  }

	return new Promise(function (resolve, reject) {
		setTimeout(function() {
			randomNumb > 0 ? resolve(winMessage) : reject('Вы проиграли. Ваши деньги сгорели.')
		}, 3000)
  }).then((response) => {
		  console.log(response.message)
		  getPrize(response.value)
    })
    .catch((error) => console.log(error))
}

function getPrize(winNumb) {
	const bankCard = +prompt('Пожалуйста, введите номер вашей банковской карты')
	return new Promise(function (resolve, reject) {
			setTimeout(function() {
				 cards.includes(`${bankCard}`)
				 ? resolve(`Ваш выигрыш в размере ${winNumb}, был выведен на карту с номером  ${bankCard}. Поздравляем`)
				 : reject(`Пользователя с таким номером карты не существует`)
			}, 3000)
	}).then((response) => console.log(response))
		.catch((error) => console.log(error))
}


//=================================================================================================================================================//

// Задача №2
// Напишите функцию для получения фото с сервера. Функция должна возвращать Promise. В созданном Promise сделайте GET-запрос на эндпоинт 'https://jsonplaceholder.typicode.com/photos' используя XMLHttpRequest. После отправки запроса добавьте только один обработчик onload. Функция-обработчик onload должна проверять равен ли статус числу 200. Если статус равен, то вызывать метод resolve. В метод резов передать ответ сервера. Если статус не равен, то вызывать метод reject и передавать ему следующую строку: 'Что-то пошло не так'.
// Вызовите функцию. После вызова функции используйте метод then() для обработки полученных с сервера данных. В методы then() отфильтруйте полученный массив, и оставьте в нём только фото с id равным 1, 3, 5, 7, 9. В цикле для каждого элемента получившегося массива с помощью js создайте элемент img, добавьте созданному элементу поле src со значением url, обрабатываемого объекта, и добавьте созданный элемент в body.
// Для обработки ошибки используйте метод catch. В метод catch передайте функцию, которая выводит полученное сообщение в консоль.

const url = 'https://jsonplaceholder.typicode.com/photos'
const photoId = [1, 3, 5, 7, 9]

function photos(url) {
    return new Promise(function (resolve, reject) {
        const myRequest = new XMLHttpRequest
        myRequest.open('GET', url)
        myRequest.send()
        myRequest.onload = function(event) {
            event.target.status === 200 ? resolve(JSON.parse(this.response)) : reject(`Что-то пошло не так`)
        }
    }).then((response) => {
          let array = getArray(response, photoId)
          images(array)
      })
      .catch((error) => console.log(error))
}

function getArray(arr, photoId) {
    let array = []
    for(let i = 0; i < photoId.length; i++) {
			array.push(arr.find(item => item.id === photoId[i]))
    }
    return array
}

function images(array) {
	array.forEach(function (item) {
        let image = document.createElement('img')
        image.className = `image`
        image.src = item.url
        document.body.append(image)
    })
}

photos(url)